{"title":"Memorizing a programming language using spaced repetition software","link":"https://sive.rs/srs","date":1357430400000,"content":"<p>\nI’ve been doing this for a year, and it’s <strong>the most helpful learning technique I’ve found in 14 years of computer programming</strong>.\n</p>\n<h3>\nBackground:\n</h3>\n<p>\nI’m an intermediate programmer.\nI didn’t go to school for it.\nI just learned by necessity because I started a website that just kept growing and growing, and I couldn’t afford to hire a programmer, so I picked up a few books on PHP, SQL, Linux, and Apache, learned just enough to make it work, then used that little knowledge for years.\n</p><p>\nBut later, when I worked along side a real programmer, I was blown away by his vocabulary!\nAll of these commands and functions just flowing effortlessly out of his fingers.\nWe were using the same language, but <strong>he had memorized so much of it</strong>, that I felt like a child next to a university professor.\nI really wanted to get that kind of fluency.\n</p><p>\nIt made me think about how much I’ve <strong>learned then immediately forgotten</strong>, over the years.\nI read books or articles about some useful feature, try it once, but then I get distracted, forget about it, and go about my normal way of doing things.\n</p><p>\nI wanted to deeply memorize the commands and techniques of the language, and not forget them, so that they stay at the forefront of my mind whenever I need them.\n</p>\n<h3>\nSpaced Repetition:\n</h3>\n<p>\nWhen you hear a new fact, it’s forgotten pretty quickly unless it’s brought back to the forefront of your mind repeatedly.\n</p><p>\nYou can do this haphazardly by immersing yourself in a language, for example, where the new words you learn will be brought up by chance occasionally.\n</p><p>\nBut memory research shows that <strong>the most effective and efficient time for a new fact to be remembered is right before you were about to forget it</strong>.\n</p><p>\n<a href=\"http://quantifiedself.com/2012/06/spaced-repetition-and-learning/\"><img src=\"/images/forgetting-curve-srs.jpg\" alt=\"forgetting curve\" /></a>\n</p><p>\nSay if you learn a new word in a foreign language, you’d want to practice it again a few minutes after hearing it, then a few hours, then the next day, then in 2 days, then 5 days, then 10 days, 3 weeks, 6 weeks, 3 months, 8 months, etc.\nAfter a while it’s basically permanently memorized with a rare reminder.\n</p><p>\n<strong>\nSpaced Repetition Software does this for you</strong>, so you can just <strong>give it a bunch of facts you want to remember, then have it quiz you once a day, and it manages the intervals based on your feedback.</strong>\nAfter each quiz question, if you say that one was easy, it won’t be introduced for a long time, but if you were stumped, then it’ll ask it again in a few minutes, until you’ve got it.\n</p><p>\n<strong>\nGo to <a href=\"https://apps.ankiweb.net/\">apps.ankiweb.net</a> and download Anki</strong>.\nIt’s a free, open source, popular spaced repetition software program.\n</p><p>\nAs for programming, you get where I’m going with this.\n</p><p>\nWhat if you could <strong>memorize everything about the programming language</strong> of your choice?\nEvery command, every parameter, every function.\nEvery solution to hundreds of the most common problems, all completely memorized at your fingertips?\nImagine going through the documentation or a book, and <strong>permanently remembering every single thing in it?</strong>\n</p><p>\nEnough of the intro, let’s get to the HOW-TO:\n</p>\n<h3>\nFirst, learn!\n</h3>\n<p>\n<strong>\nFlash cards are for <em>remembering</em> what you’ve learned.\n</strong>\n</p><p>\nBefore you create a flash card for something, you need to actually <strong>learn and understand it.</strong>\nCreate the flash card after you’ve really understood.\n</p><p>\n(This is why it’s not that helpful to look at someone else’s deck.\nThose are just reminders.)\n</p>\n<h3>\nConvert Knowledge into Small Facts:\n</h3>\n<p>\nYou’re going to be making a bunch of flash cards.\nQuestion on the front.\nAnswer on the back.\n</p><p>\nIf you were just using this to memorize foreign language vocabulary, then the formatting would be easy.\nThe front would have a word or phrase, and the back would have its translation, and vice-versa.\n</p><p>\n<img src=\"/images/anki-cn-1.png\" alt=\"example chinese flash card question\" /><br />\n<img src=\"/images/anki-cn-2.png\" alt=\"example chinese flash card answer\" />\n</p><p>\n<img src=\"/images/anki-cn-3.png\" alt=\"example chinese flash card question\" /><br />\n<img src=\"/images/anki-cn-4.png\" alt=\"example chinese flash card answer\" />\n</p><p>\nBut if you’re learning anything else, you’re going to have to put a little craft and creativity into making your own flash cards.\n</p><p>\nIt takes some effort to read through paragraphs of stuff you want to remember, pick out the key facts, break them down into their smallest form, and turn them into questions for quizzing your future self.\n</p><p>\nHere are my best time-saving tips from a year of doing this:\n</p>\n<h4>\nTurn prose into code\n</h4>\n<p>\nIf you’re reading a tutorial about programming, and come across a paragraph describing a feature.\n</p>\n<blockquote>“The add (+) operator... if only one operand is a string, the other operand is converted to a string and the result is the concatenation of the two strings.”</blockquote>\n<p>\nYou test it out yourself, play around with it, and understand it.\nSo you make a flashcard to remember it.\n</p>\n<pre>\n  var a = 5 + '5';\n  // what is a?\n</pre><pre>\n  '55'\n  If either side of + is a string, the other is\n  converted to a string before adding like strings.\n</pre>\n<h4>\nTry to trick your future self\n</h4>\n<p>\nSometimes you learn a “gotcha” — a common mistake or surprising feature.\n</p>\n<blockquote>“If the new Array constructor is passed a single number, it creates an empty Array with a length of that number. Any other combination of arguments creates an Array of those arguments.”</blockquote>\n<p>\nYou test it out yourself, play around with it, and understand it.\nThen make two flash cards to try to trick your future self.\n</p>\n<pre>\n  var a = new Array('5');\n  // what is a?\n</pre><pre>\n  An array with one item, the string '5': ['5'];\n</pre>\n  ... and then an almost-identical question ...\n<pre>\n  var a = new Array(5);\n  // what is a?\n</pre><pre>\n  An empty array with a length of 5.\n</pre>\n<p>\nWhen the program quizzes you, it will shuffle the cards, so that hopefully your examples will intentionally catch you by surprise.\n</p><p>\nYou can also try to trick yourself with more complicated examples, to keep these gotchas fresh in your mind:\n</p>\n<pre>\n  var a = [20, 10, 5, 1];\n  // what is a.sort()?\n</pre><pre>\n  [1, 10, 20, 5]\n  // sort treats all values as strings\n</pre>\n<p>\nDon’t forget to <strong>quiz yourself on the solution, too:</strong>\n</p><pre>\n  var a = [20, 10, 5, 1];\n  // sort these in numeric order\n</pre><pre>\n  function compare(v1, v2) { return(v1 — v2); }\n  a.sort(compare);\n</pre>\n<h4>\nSave the cool tricks\n</h4>\n<p>\nIf you find a cool trick you want to remember, turn it into the answer of a small challenge.\n</p>\n<pre>\n  var albums = [\n    {name: 'Beatles', title: 'White Album', price: 15},\n    {name: 'Zeppelin', title: 'II', price: 7}];\n  // make this work:\n  albums.sort(by('name'));\n  albums.sort(by('title'));\n  albums.sort(by('price'));\n</pre><pre>\n  function by(propName) {\n    return function(obj1, obj2) {\n      v1 = obj1[propName];\n      v2 = obj2[propName];\n      if (v1 &lt; v2) { return -1; }\n      else if (v1 &gt; v2) { return 1; }\n      else { return 0; }\n    };\n  }\n</pre>\n<h4>\nMake the answer require multiple solutions\n</h4>\n<p>\nIf there’s more than one way of doing something, and you want to remember both, make your future self come up with more than one solution, so you can keep both alternatives in mind.\n</p>\n<pre>\n  s = 'string like this'\n  # In Ruby, show two ways to turn it into 'String Like This'\n</pre><pre>\n  s.split.map(&amp;:capitalize).join(' ')\n  s.gsub(/\\b\\S/) {|x| x.upcase}\n</pre>\n<h4>\nTurn broad concepts into succinct examples\n</h4>\n<p>\nSay you just spent 20 minutes learning something that’s more conceptual, and not as much about remembering specific functions.\nSometimes all you need is one succinct example to remind yourself of the concept.\n</p>\n<pre>\n  /(a(b)((c)d))/.match('abcd')\n  # What will $1, $2, $3, $4 be?\n</pre><pre>\n  $1 = 'abcd'\n  $2 = 'b'\n  $3 = 'cd'\n  $4 = 'c'\n</pre>\nAnother example:\n<pre>\n  class C\n    self\n  end\n  class D &lt; C\n  end\n  d1 = D.new\n  # which object is self?\n</pre><pre>\n  class D\n</pre>\n<h4>\nRead “<a href=\"https://www.supermemo.com/en/blog/twenty-rules-of-formulating-knowledge\">20 Rules of Formulating Knowledge</a>” by Piotr Wozniak\n</h4>\n<p>\nThe best advice on this stuff is an article called “<a href=\"https://www.supermemo.com/en/blog/twenty-rules-of-formulating-knowledge\">20 Rules of Formulating Knowledge</a>” by Piotr Wozniak.\nSo please read that one.\n</p>\n<h3>\nRun Through it Daily\n</h3>\n<p>\nFor most efficient results, turn on your spaced repetition software once a day.\nIf you go too long without, you’ll screw up all the timings, and have to re-learn stuff you would have remembered.\n</p><p>\n<strong>\nYou can remember thousands of these facts in only 20 minutes a day.\n</strong>\nI just make it a morning routine.\nMake a cup of boiling tea.\nDo my Anki.\nDrink my tea.\n</p><p>\nIt’s fun when quizzing yourself to add a little adrenaline, and make yourself go as fast as you can.\n</p><p>\nIt’s like a mental visit to the gym.\nA little intense 20 minutes a day is so worth it for the immediate and long-term results.\n</p><p>\nAdd some new cards whenever you can, and you’ll be amazed that everything you saved stays fresh in your mind.\n</p>\n<h3>\nConclusion\n</h3>\n<p>\nI’ve been doing this for a year, and it’s been a HUGE boost to my fluency.\nI highly recommend it, as you can tell.\n</p><p>\nFeel free to <a href=\"https://sive.rs/contact\">email me anytime</a> to let me know how it goes for you.\n</p>\n<h3>\nRead more:\n</h3>\n<p>\nThe <a href=\"https://www.jackkinsella.ie/articles/janki-method-refined\">“Janki Method Refined” by Jack Kinsella</a> is a great article on similar approach,and explains it even better than I did here.\n</p><p>\nYou can also use Anki to learn <a href=\"https://quantifiedself.com/blog/spaced-repetition-and-learning/\">all kinds of things</a>.\n</p><p>\n<a href=\"https://augmentingcognition.com/ltm.html\">“Augmenting Long-term Memory” by Michael Nielsen</a> is an amazing article about using Anki for learning anything.\n</p><p>\nRead <a href=\"https://www.wired.com/2008/04/ff-wozniak/\">the interview with Piotr Wozniak at wired.com</a> for a story about a guy taking this to the limit.\n</p>","author":"Derek Sivers","siteTitle":"Derek Sivers","siteHash":"4098504c0d0759e13901f29e63f7d7dbb1d972a078c6dc4560660f373da5c25e","entryHash":"b0f31496991299edf2aa2e1c6d8feeb525acc7e3dc6692625ab73c8a12e41838","category":"default"}