{"title":"Generate unique random values directly in the database","link":"https://sive.rs/rand1","date":1646092800000,"content":"<p>\nYou often need to generate random strings, like for login cookies and unique entry codes.\n</p><p>\nThese strings always need to be stored in the database.\n<strong>\nSo make your life simpler by generating the random strings directly in the database.\n</strong>\nHere's a very handy PostgreSQL function to do it:\n</p>\n<div>\n<pre><code>create function gen_random_bytes(int) returns bytea as\n'$libdir/pgcrypto', 'pg_random_bytes' language c strict;\n\ncreate function random_string(len int) returns text as $$\ndeclare\n  chars text[] = '{0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}';\n  result text = '';\n  i int = 0;\n  rand bytea;\nbegin\n  -- generate secure random bytes and convert them to a string of chars.\n  rand = gen_random_bytes($1);\n  for i in 0..len-1 loop\n    -- rand indexing is zero-based, chars is 1-based.\n    result = result || chars[1 + (get_byte(rand, i) % array_length(chars, 1))];\n  end loop;\n  return result;\nend;\n$$ language plpgsql;\n</code></pre><small><a href=\"https://sive.rs/code/rand1-1.sql\">download code</a></small>\n</div>\n<p>\nGive it a number: the length of the random string you want.\nIt will return random alphanumeric text of that length.\n</p>\n<div>\n<pre><code>select random_string(8);\nrandom_string \n───────────────\n yBuXga02\n\nselect random_string(8);\n random_string \n───────────────\n eP3X7yqe\n</code></pre><small><a href=\"https://sive.rs/code/rand1-2.txt\">download code</a></small>\n</div>\n<p>\nThe chance of random clash is very small.\n<strong>\nBut you need to be completely sure that the new random string is unique — not already existing in that column in that table.\n</strong>\nSo here's a function where you give it the string length, table name, and column name.\nIt will return a random string confirmed to be unique — to not exist there already.\nIt gets a random string, searches for it in that table and column, and if not found, returns it.\nOtherwise, if it is found, gets a new random string and loops back, trying again until not found.\n</p>\n<div>\n<pre><code>-- return random string confirmed to not exist in given tablename.colname\ncreate function unique_random(len int, _table text, _col text) returns text as $$\ndeclare\n  result text;\n  numrows int;\nbegin\n  result = random_string(len);\n  loop\n    execute format('select 1 from %I where %I = %L', _table, _col, result);\n    get diagnostics numrows = row_count;\n    if numrows = 0 then\n      return result; \n    end if;\n    result = random_string(len);\n  end loop;\nend;\n$$ language plpgsql;\n</code></pre><small><a href=\"https://sive.rs/code/rand1-3.sql\">download code</a></small>\n</div>\n<p>\nI used to call functions like this <a href=\"https://sive.rs/clean1\">using database triggers</a>, called on any insert.\nBut then I found out something surprisingly cool and so much simpler:\n<strong>\nYou can call functions as default values directly in table definitions.\n</strong>\n</p><p>\nLook at this table, calling unique_random as its default value:\n</p>\n<div>\n<pre><code>create table things (\n  code char(8) primary key default unique_random(8, 'things', 'code'),\n  name text\n);\n</code></pre><small><a href=\"https://sive.rs/code/rand1-4.sql\">download code</a></small>\n</div>\n<p>\nSo simple and clear!\nTo use it, you just do a regular insert, and it generates the guaranteed-unique default value.\n</p>\n<div>\n<pre><code>insert into things (name) values ('one') returning *;\n\n   code   │ name \n──────────┼──────\n nRSXbVWQ │ one\n\ninsert into things (name) values ('two') returning *;\n\n   code   │ name \n──────────┼──────\n EAS9wGcl │ two\n</code></pre><small><a href=\"https://sive.rs/code/rand1-5.txt\">download code</a></small>\n</div>\n<p>\nI've found this particularly handy for creating login cookies:\n</p>\n<div>\n<pre><code>create table cookies (\n  person_id int primary key,\n  cookie char(32) unique default unique_random(32, 'cookies', 'cookie')\n);\n</code></pre><small><a href=\"https://sive.rs/code/rand1-6.sql\">download code</a></small>\n</div>\n<p>\nInstead of having your client code, your JavaScript, Python, Ruby or whatever, generating the random code, it's extra-nice to have this in your database directly, not only because it's cleaner, but because it saves repeated calls between your client code and database, confirming uniqueness.\nOne simple insert of the person_id returns the unique and already-saved random cookie string:\n</p>\n<div>\n<pre><code>insert into cookies (person_id) values (1) returning *;\n\n person_id │              cookie              \n───────────┼──────────────────────────────────\n         1 │ 0P8Tp4wjXuTqCCh1NCR9XIom20z9IcYv\n</code></pre><small><a href=\"https://sive.rs/code/rand1-7.txt\">download code</a></small>\n</div>\n<p>\nDownload the code at <a href=\"https://sive.rs/code/rand1.sql\">/code/rand1.sql</a>.\n</p>\n","author":"Derek Sivers","siteTitle":"Derek Sivers","siteHash":"4098504c0d0759e13901f29e63f7d7dbb1d972a078c6dc4560660f373da5c25e","entryHash":"998364a6993e46631466c5b409db66caa278f552a5cf70ff86902158545b4251","category":"default"}