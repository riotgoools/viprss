{"title":"In favor of small modules and plumbing","link":"https://blog.webb.page/2020-02-27-small-modules-and-plumbing.txt","date":1582761600000,"content":"<p>In the JavaScript/Node.js community there have been fiery debates over whether\npublishing super-focused modules to npm is a positive thing or not. Installing\na module that consists of maybe 50 lines of code or so but does a specific\nthing you need <em>well</em> is a good thing. No need to copy/paste the same lines of\ncode in all of your projects. Then again, does publishing such modules pollute\nthe world's most popular JavaScript package manager and snatch awesome package\nnames away from multi-faceted modules? As with most things, it boils down to\n<em>perspective</em>. This post examines how I used to be of the mindset that\npublishing a plethora of \"focused\" modules is a waste of time but now think is\na fantastic idea.</p>\n<h2>The <code>left-pad</code> incident, &amp;c</h2>\n<p>Azer KoÃ§ulu, the developer of a module called <code>left-pad</code>, unpublished<a href=\"https://github.com/left-pad/left-pad/issues/4\">1</a> this\nand the other 200+ modules he wrote from npm. It was a retaliatory move due to\nthe fact that npm (the company) reverted ownership of another module of his,\n<code>kik</code>, to a company of the same name. To quote<a href=\"https://kodfabrik.com/journal/i-ve-just-liberated-my-modules\">2</a> the man himself:</p>\n<blockquote>\n<p>This situation made me realize that NPM is someone's private land where\ncorporate is more powerful than the people, and I do open source because,\nPower To The People.</p>\n</blockquote>\n<p>To be honest, I don't blame him. The <code>kik</code> situation was rather messed up in\nmy opinion but when there are patent trolls involved, SOMEONE is getting\nfucked (see npm's response<a href=\"https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\">3</a>). Unfortunately, Azer's actions broke a\nsignificant amount of larger modules that depended upon the existence of\n<code>left-pad</code> and the Internet seemed to quite literally blow up for a day.\nPundits published think pieces to Medium, Twitter threads proliferated, and\ninsults/disdain toward Azer flew online for days. I'll admit, I got caught up\nin the frenzy and did a lot of SMDH<a href=\"https://www.urbandictionary.com/define.php?term=SMDH\">4</a> towards Azer, npm, and kik.</p>\n<p>At the time I was fully content with finding small utility modules like\n<code>left-pad</code> for inclusion within my projects and rather than installing them, I\nopted to extract the source code and place them in my projects directly. I did\nthis for a few reasons:</p>\n<ol>\n<li>Prevent potential fallout from an unpublish from happening to me.</li>\n<li>Protection against a module creator giving up ownership to a\nspammer/hacker.</li>\n<li>Quality control. Seriously, there is almost too much code out there that\nmixes tabs/spaces, single/double quotes, semi-colon/no semi-colon,\nsnake/camel casing, and so on. Often in the same damn file! Gross.</li>\n</ol>\n<p>This is not to say that my own code is flawless. I'll look back on my old code\nand think it's shit but at least it's <em>consistent</em> shit.</p>\n<h2>Turning Point</h2>\n<p>A couple weeks ago I was returning to work on an API rewrite in progress and\nsomething would not compile. I was befuddled because I have several API\nprojects that more or less share the same core. That's when I thought, \"Why\n<em>aren't</em> most of the these utility functions their own modules?\" This question\nstuck in my mind as I browsed the web and I remembered to look up a rather\nprolific JavaScript developer by the name of Sindre Sorhus. The man has over\none THOUSAND modules published on npm and all of them are small and/or\nfocused (does one thing well, no bells and whistles). Here<a href=\"https://github.com/sindresorhus/ama/issues/10#issuecomment-117766328\">5</a> is his rationale\nfor creating them:</p>\n<blockquote>\n<p>You make small focused modules for reusability and to make it possible to\nbuild larger more advanced things that are easier to reason about.</p>\n</blockquote>\n<p>This made perfect sense to me and I had a chat with Jesse<a href=\"https://jesseyoungblood.com\">6</a> about it. He'd\nthe same thought a year prior and started working on publishing modules from\nthe code he was constantly copy/pasting between projects. Jesse's affirmation,\ncoupled with Sindre's node module boilerplate<a href=\"https://github.com/sindresorhus/node-module-boilerplate\">7</a> and this tutorial<a href=\"https://www.tsmean.com/articles/how-to-write-a-typescript-library\">8</a> on\ncreating TypeScript libraries encouraged me to get started with publishing\nmore focused modules than I had previously.</p>\n<p>I am in the process of (hopefully) obtaining ownership of an unused\n(and empty) scope/organization on npm and once that happens, the nine focused\nmodules I've written since my chat with Jesse will be live (these modules are\ncurrently published on my personal package registry). I see a couple\nadvantages to scoping<a href=\"https://docs.npmjs.com/misc/scope\">9</a> one's modules:</p>\n<ul>\n<li>Any cool name you can think of for your module is available</li>\n<li>At a glance, anyone can tell (roughly) who is responsible for the module</li>\n<li>Reputation building - become known for creating useful modules</li>\n<li>Doesn't \"pollute\" the npm namespace since everything's under an umbrella, so\nto speak</li>\n</ul>\n<p>Some <em>disadvantages</em> to this approach:</p>\n<ul>\n<li>Developers have to type extra to install your module<ul>\n<li><code>npm i @yourScope/packageName</code> versus</li>\n<li><code>npm i packageName</code></li>\n</ul>\n</li>\n<li>If you have a truly unique package name and it's available, you'd be a fool\nto not take it</li>\n</ul>\n<p>It's basically like choosing a gTLD over a classic TLD. If <code>webb.com</code> was\navailable, I would have purchased that domain. It was not, so I purchased\n<code>webb.page</code>. These are both great but I was lucky that mine is a neat\ndomain hack.</p>\n<h2>The Bigger Picture</h2>\n<p>There's another reason I've decided to go through with all this. To quote\nSteve Jobs (emphasis mine):</p>\n<blockquote>\n<p>When you're a carpenter making a beautiful chest of drawers, you're not\ngoing to use a piece of plywood on the back, even though it faces the wall\nand nobody will ever see it. You'll know it's there, so you're going to use\na beautiful piece of wood on the back. <em>For you to sleep well at night, the\naesthetic, the quality, has to be carried all the way through.</em></p>\n</blockquote>\n<p>You remember that API project I mentioned earlier? I could not escape the\nnagging suspicion that my project could be, nay, FEEL a helluva lot better\nif I knew the components used to create it were stronger. One way to ensure\nthat is to write tests. Another way is to use a typed languageâ€¦like\nTypeScript. And, that's exactly what I did for every module I've created\nleading up to this post. I suppose I just made the case for writing tests,\nperiod. ðŸ¤”</p>\n<p>Regarding Jobs' quote, here's another way to look at it: the most beautiful\nhotel in the world wouldn't feel like such if all the toilets overflowed when\nflushed. I'm a serial creator but I've grown to enjoy working on\nthe plumbing. ðŸ•¸</p>\n<h2>&amp;c</h2>\n<ul>\n<li>My personal package registry is currently running on Verdaccio<a href=\"https://github.com/verdaccio/verdaccio\">10</a> but I'm\nthinking of checking out Entropic<a href=\"https://github.com/entropic-dev/entropic\">11</a>. We'll see.</li>\n<li>There's an awesome<a href=\"https://github.com/parro-it/awesome-micro-npm-packages\">12</a> list of other focused modules to get inspired by or\nuse in your own projects.</li>\n<li>This new love of plumbing is at odds with my impatience to get at least\nthree products I have out of beta (and to make money from them). The end\ngoal is for these products to be as automated and fault-tolerant as possible\nso I can focus on customer experience. No amount of code can replace the\nhuman connection.</li>\n</ul>\n<hr />\n","author":"","siteTitle":"the webb blog","siteHash":"d87386c8de21b16d23a4d22ceb0991728c5b4e4486d627490c6fcde14e563300","entryHash":"6890c68e0403ada623bea27a6a00a7589a6e117c0d0e25b8e9cf7d81f238fb6f","category":"Sites"}