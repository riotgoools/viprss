{"title":"Socii Dispatch 07","link":"https://blog.webb.page/2019-09-08-socii-dispatch-07.txt","date":1567900800000,"content":"<p>The previous version of Socii consisted of seven \"microservices\" and two web\napps that were eventually condensed to two APIs and (hopefully) a sensible\nstack. This post will detail the process and why the changes were made.</p>\n<h2>TL;DR</h2>\n<p>Old Socii was busted and didn't feel good to use. Even <em>I</em> didn't want to use\nit so changes had to be made. New Socii is super pleasant to use and I'm happy\nagain. What follows is a deep-dive into the history of the architecture and\nwhy I made the changes I made.</p>\n<h2>1.0</h2>\n<h3>Microservices</h3>\n<p>Horus:  the notifier\nHu:     the authenticator (user management)\nNemty:  the emailer\nRa:     the one who knows all (GraphQL)\nSeshat: the keeper of records (post management)\nThoth:  the media converter</p>\n<h3>Web Apps</h3>\n<p>Marketing: the pretty informational site\nNetwork:   the actual web app</p>\n<h3>The Rest</h3>\n<p>DigitalOcean: the server\nMailgun:      backend for email delivery\nMongoDB:      the database</p>\n<h2>How it worked</h2>\n<p>User visited <code>socii.network</code> and liked what they saw so they decided to sign\nup. Being a new user, they were logged in immediately. On the backend, Hu\ncreated the user and pinged Nemty with the user's email address. Nemty created\nand sent a welcome email to the user.</p>\n<p>If the user decided to make a post, Seshat would get those details and save it\nto the database. Thoth took care of uploading the user's profile picture.\nHorus facilitated details of post actions (favorite, reply, &amp;c) to Nemty. Ra\nwas the glue that held everything together.</p>\n<h2>What didn't work</h2>\n<h3>Microservices</h3>\n<p>Adding a feature to one microservice often meant updating nearly all of them\nand that grew hella tedious. When Socii 1.0 was in development the web\nindustry was super buzzed about microservices, everywhere! They would solve\nall your problems! In my case, they <em>added</em> more than removed problems. It is\n<em>fully possible</em> that I did not write them in the way microservices are\n<em>supposed</em> to be written but when most of the tutorials on the subject came\nfrom the Medium<a href=\"https://medium.com\">1</a> hive mind, you can understand how good information and\nexamples (!!) are hard to come by.</p>\n<h3>Web Apps</h3>\n<p>Like my microservices, I did not enjoy doing a lot of work on the Network and\nthen realizing Marketing wasn't up to date with things ranging from a shade of\nblue to the modules powering the app. I did a <em>lot</em> of copy/pasting and it\nfelt like I was doing something wrong. Tedium!</p>\n<h3>The Rest</h3>\n<p>DigitalOcean and Mailgun have been doing well for me. In fact, I believe I'm\ngrandfathered into Mailgun's free tier due to the low volume of Socii's email\noutput. I've experienced zero issues with email deliverability so I'd gladly\npay for it (make Socii popular y'all).</p>\n<p>MongoDB? <em>Sigh</em></p>\n<p>Like many front-end developers, I gravitated to it for my projects because it\nwas the \"least scary\" database available. Plenty of ORMs<a href=\"https://stackoverflow.com/a/1279678\">2</a> are available for\nit and I used mongoose<a href=\"https://github.com/Automattic/mongoose\">3</a> for a while before transitioning to mongoist<a href=\"https://github.com/saintedlama/mongoist\">4</a>\nduring one of the phases of the refactor (in total, there have been at least\nfour phases).</p>\n<p>The issue that stumped me for at <em>least</em> a month before urging me to\ninvestigate other databases involved updating the schema of posts and users. I\nforget the details exactly but I had a defined schema and exported the data to\nperform a database migration. The migration kept failing due to permission\nchecks of some sort and no amount of search engine kung fu rescued me from my\nwoes. Mongo is super unhelpful when things go wrong.</p>\n<p>I ended up cursing myself for being so reliant on a database with piss-poor\nerror messages.</p>\n<h2>The Search</h2>\n<h3>Microservices</h3>\n<p>I had been using ZEIT's<a href=\"https://zeit.co\">5</a> micro<a href=\"https://github.com/zeit/micro\">6</a>/micro-dev<a href=\"https://github.com/zeit/micro-dev\">7</a> modules as the basis for my\nmicroservices but the lack of updates/interest from the maintainers<a href=\"https://github.com/zeit/micro-dev/issues/41\">8</a> urged\nme to look elsewhere.</p>\n<p>I also read many articles about how companies like Airbnb and Netflix managed\ntheir software, to better inform my own decisions about the future of my\nmicroservices. In the realm of that research I learned about \"monorepos\" with\nthe most popular NodeJS module being Lerna<a href=\"https://github.com/lerna/lerna\">9</a>. I decided not to use it but to\nimplement one of the core features, which was to put all of my microservices\ninto one API and go from there.</p>\n<h3>Web Apps</h3>\n<p>The original Socii made extensive use of websockets in order to provide a\nresponsive UI. That…worked…for a while. I soon realized I was merely\nreplicating what single-page applications do.</p>\n<p>The web industry's favorite framework for SPAs is (was?) React and I <em>despise</em>\nReact. It has always seemed too bulky and I'm allergic to packages with a\nboatload of dependencies.</p>\n<p>Far too many times in my web development career I have been forced to stop\nusing a useful package because of a dependency being out of date or suffering\nfrom a vulnerability and the author/maintainers of that dependency being\nunresponsive or plain not caring. Bulky packages also become targets for\nmisuse. Companies like Snyk<a href=\"https://snyk.io\">10</a> exist to help mitigate this issue but the\nfirst step, IMHO, is to limit the attack area yourself by choosing smaller\n(often with full feature-parity) packages.</p>\n<p>Anyhoo, I looked at Preact<a href=\"https://github.com/preactjs/preact\">11</a>, Composi<a href=\"https://github.com/composi\">12</a>, and a lot of interesting\nHyperScript mini-frameworks before settling on Mithril<a href=\"https://github.com/MithrilJS/mithril.js\">13</a>. I really thought\nthis was <em>IT</em>. I found the perfect front-end framework! Right?! Heh, NO.</p>\n<p>The original codebase was server-side rendered which meant shared links in\nApple Messages and elsewhere online showed rich metadata; title of the page,\ndescription, and Socii's icon image. With Mithril, I lost all that. Frustrated\nonce more, it was back to the drawing board.</p>\n<h3>The Rest</h3>\n<p>Your service is only as good as your database.</p>\n<p>Your database of choice is the jewel, the Big Kahuna, the very <em>foundation</em> of\nyour service. So, I tested Apple's FoundationDB. Long story short, I found it\nrelatively easy to setup but was confused about how I'd put data into it's\nDocument Layer (document data model on FoundationDB, implementing MongoDB's\nwire protocol; I'd be able to plug 'n play, basically).</p>\n<p>However, I did find an awesome NodeJS module written by Steve Korshakov, CEO\nof Openland<a href=\"https://openland.com\">14</a>: @openland/foundationdb<a href=\"https://fdb.openland.com\">15</a>. Unfortunately, it didn't have\nDocument Layer support so my search continued.</p>\n<p>No other database looked pleasant to use (to me). One of my developer friends\nespoused the beauty of MariaDB but I was spoiled by ORMs. I didn't want to\nlearn how to write weird syntax just to interface with my database (I also\ndidn't realize at the time that TypeORM<a href=\"https://github.com/typeorm/typeorm\">16</a> was a thing, which renders my\nprevious sentence null).</p>\n<h2>2.0</h2>\n<h3>Microservices</h3>\n<p>Five of the original six microservices I created were condensed into a single\nGraphQL API. The outlier was Thoth (media converter/file management) because\nas great as GraphQL is, it cannot handle file uploads as easy as a standard\nREST API could.</p>\n<p>Instead, this is the process: when I need to upload something (like a profile\npicture for instance), the upload is happening in the background as soon as\npossible. The response from Thoth is the resulting URL from DigitalOcean's\nSpaces (basically AWS) that becomes a hidden input's value that will finally\nget sent to the API to be inserted into the database, after a user clicks\n\"save\"/\"upload\".</p>\n<p>Kind of convoluted but it works for now.</p>\n<p>So, I now have two APIs: a GraphQL-based one (primary) and a REST-based one\n(file uploads). Both are built upon the restify<a href=\"https://github.com/restify/node-restify\">17</a> framework (it's like\nExpress but focused on API creation).</p>\n<h3>Web Apps</h3>\n<p>Back at the drawing board but <em>fully understanding</em> what my requirements were\nfor a front-end framework, it didn't take me long to find another one of\nZEIT's open-source projects, Next<a href=\"https://github.com/zeit/next.js\">18</a>. Alas, it was built upon React but if I\ncould have an SSR-powered SPA I'd swallow that. And so I did until\napproximately a week and a half later when I came across a blog post<a href=\"https://svelte.dev/blog/sapper-towards-the-ideal-web-app-framework\">19</a>\ncomparing Next and something called \"Sapper\". This section of the post blew my\nmind (emphasis mine):</p>\n<blockquote>\n<p><em>The same ‘hello world' app that took 204kb with React and Next weighs just\n7kb with Sapper.</em> That number is likely to fall further in the future as we\nexplore the space of optimisation possibilities, such as not shipping any\nJavaScript <em>at all</em> for pages that aren't interactive, beyond the tiny\nSapper runtime that handles client-side routing.</p>\n</blockquote>\n<p>Sapper has Express-compatible middleware, making it easy to understand and\ncustomize for people who are used to using Express (and Fastify, Restify, &amp;c).\nIt is built upon a framework that's not <em>really</em> a framework: Svelte. Like the\nname implies, Svelte compiles code to tiny, framework-less vanilla JavaScript.\nQuite honestly, this is everything I've been looking for; a lightweight SPA\nwith SSR support!</p>\n<p>With the web app framework FINALLY figured out, I had to then figure out\nwhat I wanted to do about having two front-ends to manage. And…I didn't want\nto manage two of them. I decided to merge them instead and deprecate the use\nof a sub-domain for the Network. So, if you were logged-in you would see the\nglobal feed but if you were logged-out you would see the marketing homepage.\nThe navigation would also change accordingly.</p>\n<h3>The Rest</h3>\n<p>The database I settled upon is RethinkDB<a href=\"https://github.com/rethinkdb\">20</a>. An interesting choice\nconsidering that one of the most commented issues in one of its repos on\nGithub is titled, \"is this project dead?<a href=\"https://github.com/rethinkdb/rethinkdb/issues/6747\">21</a>\". Well, the original company\nbehind it is but there's still a small, vibrant community around it that's\nbeen using Rethink in production for years.</p>\n<p>One of the great things about Rethink is the web interface<a href=\"https://rethinkdb.com/docs/administration-tools\">22</a> it comes with\n(you can disable this if you want). This interface has a feature called \"Data\nExplorer\" and like the name implies, it allows you to test database commands\n(or, quickly query something from your database). Coming from a database that\neffectively told you nothing via opaque errors to a database that gave you the\ntools to succeed was a breath of fresh air and made me question why the\ncompany behind Rethink failed in the first place. The founder of the company,\nSlava Akhmechet, wrote about their failure<a href=\"https://www.defmacro.org/2017/01/18/why-rethinkdb-failed.html\">23</a> in depth and the TL;DR is:\ngreat product, wrong time.</p>\n<h2>The Future</h2>\n<p>I believe I have created a stable foundation for the future of Socii's\ndevelopment. So, what's next? A laundry list of features: images in posts,\nmore profile customization, groups, iOS app, re-enabled JSON Feed for\nprofiles, end-to-end encryption, &amp;c. I don't have experience with CI/CD\n(Continuous Integration/Development) workflows so maybe that'll be the next\nthing major thing I tackle. Of course, I'll share my experiences along the\nway. 🕸</p>\n<hr />\n","author":"","siteTitle":"the webb blog","siteHash":"d87386c8de21b16d23a4d22ceb0991728c5b4e4486d627490c6fcde14e563300","entryHash":"c8c228b9fcad82e6d9ea5b0517fbe04d3fc4bfa89123cd1e5d79ec5af410101a","category":"Sites"}