{"title":"Migrating from MongoDB to RethinkDB","link":"https://blog.webb.page/2020-01-28-migrating-from-mongo-to-rethink.txt","date":1580169600000,"content":"<p>RethinkDB, seemingly on life support for quite some time, is seeing a\nrevival<a href=\"https://rethinkdb.com/blog/2.4.0-release\">1</a> of sorts. As such, I thought it prudent to make available evergreen\ncontent for my favorite database these days. If you are interested in trying\nRethinkDB you can check out these<a href=\"https://pusher.com/tutorials/live-node-rethinkdb\">2</a> two<a href=\"https://www.pluralsight.com/guides/a-practical-introduction-to-rethinkdb\">3</a> tutorials (my guide will not cover\ninstallation or setup).</p>\n<h2>Preparing MongoDB exports</h2>\n<pre><code># Command\nmongoexport --port PORT_NUMBER --db DATABASE_NAME --collection COLLECTION_NAME --out COLLECTION_NAME-`date \"+%Y-%m-%d\"`.json --pretty --jsonArray\n\n# Example\nmongoexport --port 98765 --db dawebb --collection users --out users-`date \"+%Y-%m-%d\"`.json --pretty --jsonArray\n</code></pre>\n<p>There's a bit to unpack here so I'll break it down. Keep in mind that all the\nparameters yelling at you are <em>placeholders</em> (for you to replace with your own\nparameters).</p>\n<p>Actually, the placeholders are self-explanatory but the second half of the\ncommand is interesting.</p>\n<p><code>COLLECTION_NAME-`date \"+%Y-%m-%d\"`.json</code> makes it so the exported\ncollection looks like <code>users-2020-01-24.json</code>, with the date being whenever\nyou ran the above command. Super nifty for backups too.</p>\n<p>The <code>--pretty</code> flag isn't necessary for the import into RethinkDB to work,\nit's for <em>you</em> to inspect the export for any reason.</p>\n<p>The last flag<a href=\"https://docs.mongodb.com/manual/reference/program/mongoexport/#cmdoption-mongoexport-jsonarray\">4</a>, <code>--jsonArray</code>, is the most important. For some reason,\nMongoDB exports each item in a collection as its own object <em>not</em> separated by\ncommas. Maybe MongoDB's import process doesn't choke on malformed JSON but\neverything else does. <code>--jsonArray</code> puts the contents of the export into a\nsingle JSON array. Like you'd expect by defaultâ€¦maybe that's just me.</p>\n<p>NOTE: <code>--out</code> is the destination path so if you haven't prefaced\n<code>COLLECTION_NAME-`date \"+%Y-%m-%d\"`.json</code> with a path, the export will be\nin your home directory.</p>\n<p>Anyhoo once you've exported the collections you care about, SFTP into that\nserver to grab them and place them on your Desktop so you don't have a brain\nfart and forget where you put them moments later.</p>\n<h2>Migrating, phase 01</h2>\n<p>MongoDB comes with some oddities that you may not want in your new database.\nNotably, how it deals with IDs. Here's an example:</p>\n<pre><code>{\n  \"_id\": {\n    \"$oid\": \"6bf9b676c24869077c37f61e\"\n  },\n  \"admin\": true,\n  \"dashboard\": [],\n  \"language\": \"en_US\",\n  \"loginMethod\": \"link\",\n  \"nameFirst\": \"\",\n  \"nameLast\": \"\",\n  \"plan\": \"free\",\n  \"summaries\": [],\n  \"timezone\": \"gmt-05-02\",\n  \"verified\": true,\n  \"email\": \"user@domain.tld\",\n  \"__v\": 0\n}\n</code></pre>\n<p>In RethinkDB IDs are simply <code>id</code> and you have no need for <code>__v</code> so you\nprobably don't want these values in your shiny new database. Also, you may\nhave decided to use this migration period switch up your schema. Combine\n<code>nameFirst</code> with <code>nameLast</code>? Drop <code>plan</code>? Update <code>timzeone</code>? Replace\n<code>createdAt</code> with <code>created</code>? Regardless, you're gonna need to do a bit of\nlegwork to clean your MongoDB export(s).</p>\n<p>The entire script I use is hosted here<a href=\"https://gist.github.com/NetOperatorWibby/5084bf5c64306093e067fc43cfa4fcdb\">5</a> but I'll point out some\nrelevant pieces.</p>\n<p>If you have any fields with dates/milliseconds, your import will fail unless\nyou wrap those fields in <code>new Date</code> like so:</p>\n<pre><code>â€¦,\ntimestamp: new Date(timestamp),\nâ€¦,\n</code></pre>\n<p>To reuse the IDs that were generated in MongoDB for usage in RethinkDB, you're\ngonna need to do something like this:</p>\n<pre><code>â€¦,\nid: record._id[\"$oid\"],\nâ€¦,\n</code></pre>\n<p>You'll also need to make sure to explicity select the fields you want to\ntransfer into your new export. The gist linked above should answer remaining\nquestions you may have.</p>\n<h2>Importing into RethinkDB</h2>\n<p>Even though you've already installed RethinkDB, you need to install the Python\ndriver<a href=\"https://rethinkdb.com/docs/install-drivers/python\">6</a> as well (for importing functionality, at least I had to do this\nfor macOS).</p>\n<p>Also, make sure you are importing your newly processed/migrated data into\nRethinkDB, not the original nonsense from your MongoDB export (unless of\ncourse, that's your plan).</p>\n<pre><code># Command\nrethinkdb import -f PATH_TO_PROCESSED_EXPORT_FILE --table DATABASE.TABLE -c CONNECTION_URL --password-file PASSWORD_FILE --force\n\n# Example\nrethinkdb import -f ~/Desktop/migrated/users-2020-01-24.json --table dawebb.users -c localhost:98765 --password-file ~/Desktop/rethinkpass.txt --force\n</code></pre>\n<p>If you don't have a password on your RethinkDB database, you can safely omit\nthe <code>--password-file</code> flag. Otherwise, make sure the password file only\ncontains the password. If your IDE automatically generates new lines in files,\njust create the password file with <code>nano</code>.</p>\n<p>Make sure you run the above command while RethinkDB is running and you'll see\nfreshly created tables successfully created.</p>\n<h2>Migrating, phase 02</h2>\n<p>Alright, we're almost at the finish line!</p>\n<p>One of the neat things about RethinkDB (and a feature that convinced me to\nmake the jump) is its Data Explorer. It's a UI that allows you to manipulate\nor check out your tables. There are just two remaining things we need to do\nand they're quick and easy: 1) set up indexes for our tables and 2) update\ntime-based data to a format RethinkDB likes.</p>\n<p>Visit <code>http://localhost:8080</code> (default port, unless you changed it) and click\non \"Data Explorer\" in the header. In the text field you'll be able to perform\nqueries using JavaScript.</p>\n<h3>Setting up indexes</h3>\n<p>By default <code>id</code> is an index but you may want more. Indexes are for fields with\nunique values so it's easy to think of which field(s) would be suitable.</p>\n<p>Sometimes, only the ID would be unique and that's fine.</p>\n<pre><code>// Command\nr.db(\"DATABASE_NAME\").table(\"TABLE_NAME\").index_create(\"FIELD_WITH_UNIQUE_VALUE\");\n\n// Examples\nr.db(\"dawebb\").table(\"users\").index_create(\"email\");\nr.db(\"dawebb\").table(\"posts\").index_create(\"slug\");\n</code></pre>\n<p>Now let's update our time-based fields:</p>\n<pre><code>// Command\nr.db(\"DATABASE_NAME\").table(\"TABLE_NAME\").update({\n  created: r.ISO8601(r.row(\"created\")),\n  updated: r.ISO8601(r.row(\"updated\"))\n});\n\n// Examples\nr.db(\"dawebb\").table(\"users\").update({\n  created: r.ISO8601(r.row(\"created\")),\n  updated: r.ISO8601(r.row(\"updated\"))\n});\n\nr.db(\"dawebb\").table(\"visits\").update({\n  timestamp: r.ISO8601(r.row(\"timestamp\"))\n});\n</code></pre>\n<h2>FIN</h2>\n<p>And there you have it! A super easy guide to move from MongoDB to RethinkDB.\nI've been using RethinkDB for several months now and I am way happier than I\nwas with MongoDB. While super easy to get into, once you get in too deep it\nbecomes an exercise in frustration to find solutions to ambiguous errors and\nthe MongoDB docs are not user-friendly.</p>\n<p>Contrast that with RethinkDB's Data Explorer, clear error messages, and clean\ndocumentation and it's not difficult to imagine why I'd make the switch. ðŸ•¸</p>\n<p>P.S. New year, new projects<a href=\"https://socii.network/NetOpWibby/status/e3HWCaoqTZYzZvZ47RXfp\">7</a>, and now I feel like I need a new design for\nthis blog. And then I remembered that first I need to create a personal API<a href=\"/2019-12-02-a-personal-api.txt\">8</a>\nso this blog can just become the presentation layer for the content.</p>\n<p><strong>2020.01.30 update</strong></p>\n<blockquote>\n<p>Another reason to migrate is the license of MongoDB: SSPL vs. Apache 2\nof RethinkDB.\nâ€” af<a href=\"https://lobste.rs/u/af\">9</a></p>\n</blockquote>\n<p>For others who may not know what SSPL<a href=\"https://lukasatkinson.de/2019/mongodb-no-longer-seeks-osi-approval-for-sspl\">10</a> entails (like me until I read the\nlinked post):</p>\n<p>Basically, SSPL means one cannot offer MongoDB as a hosted service. That makes\nsense from their end as they offer hosting. However, it's a bit of a punk move\nbecause they are preventing potential competition from forcing them to improve\ntheir product. ðŸ•¸</p>\n<hr />\n","author":"","siteTitle":"the webb blog","siteHash":"d87386c8de21b16d23a4d22ceb0991728c5b4e4486d627490c6fcde14e563300","entryHash":"c8cd8254f9a3298544a88c5e1b524d3cddd81ccaa022c0cd60d661ba83061666","category":"Sites"}