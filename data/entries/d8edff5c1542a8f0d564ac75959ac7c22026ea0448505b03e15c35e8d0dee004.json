{"title":"Find a good available .com domain","link":"https://sive.rs/com","date":1654646400000,"content":"<p>\nIf you need a new domain name, and you want a <strong>.com</strong>, and you don’t want to type random ideas into a registrar search, here’s a way to do it.\n</p>\n<h2>\nDownload the list of all registered .com domains\n</h2>\n<p>\nFirst, apply for access to the zone file, using ICANN’s Centralized Zone Data Service (CZDS) at <a href=\"https://czds.icann.org/\">https://czds.icann.org/</a>.\nIt’s free, but takes a few days to get approved.\n<a href=\"https://www.verisign.com/en_US/channel-resources/domain-registry-products/zone-file/index.xhtml\">Read more about it here</a>.\n</p><p>\nOnce approved, they email you a password to log in and download the file called <strong>com.txt.gz</strong>.\n</p>\n<code><pre>\n$ du -hs com.txt.gz # 4.6GB compressed\n4.6G    com.txt.gz\n$ gunzip com.txt.gz # uncompress and wait\n$ du -hs com.txt\n23.0G   com.txt     # 23 gigs uncompressed\n$ wc -l com.txt\n404261754 com.txt   # 404 million lines\n</pre></code>\n\n<h2>\nExtract the unique names\n</h2>\n<p>\n<strong>com.txt</strong> has 404 million lines like this:\n</p>\n<code><pre>\nzombahomes.com. 172800  in      ns      ns2.tierra.net.\nzombai.com.     172800  in      ns      ns1.parkingcrew.net.\nzombai.com.     172800  in      ns      ns2.parkingcrew.net.\nzombaid.com.    172800  in      ns      nsg1.namebrightdns.com.\nzombaid.com.    172800  in      ns      nsg2.namebrightdns.com.\nzombaimmo.com.  172800  in      ns      ns10.lwsdns.com.\nzombaimmo.com.  172800  in      ns      ns11.lwsdns.com.\nzombaimmo.com.  172800  in      ns      ns12.lwsdns.com.\nzombaimmo.com.  172800  in      ns      ns17.lwsdns.com.\nzombaio.com.    172800  in      ns      ns-1073.awsdns-06.org.\n</pre></code>\n<p>\nDomains usually have more than one entry.\nYou need to extract the unique entries.\nAnd you only need the part before the “.com”.\n</p><p>\nHere’s a Ruby script that loops through com.txt, gets the part before .com, skips it if duplicate, and outputs it if unique.\n</p>\n<div>\n<pre><code>domain = ''\nFile.open('com.txt', 'r') do |infile|\n  File.open('domains.txt', 'w') do |outfile|\n    while line = infile.gets\n      temp = line[0...(line.index('.com'))]\n      next if temp == domain\n      domain = temp\n      outfile.puts domain\n    end\n  end\nend\n</code></pre><small><a href=\"https://sive.rs/code/domain-parse.rb\">download code</a></small>\n</div>\n<p>\n“domains.txt” should now be about 162 million lines - (about 2.2GB) - that look like this:\n</p>\n<code><pre>\nzombahomes\nzombai\nzombaid\nzombaimmo\nzombaio\n</pre></code>\n\n<h2>\nLoad it into SQLite, and index it.\n</h2>\n<code><pre>\n$ sqlite3 domains.db \nsqlite&gt; create table domains(domain text);\nsqlite&gt; .import \"domains.txt\" domains\nsqlite&gt; create index dd on domains(domain);\n</pre></code>\n\n<h2>\nFind available dictionary words\n</h2>\n<p>\nIf you’re on Mac, Linux, or <a href=\"https://sive.rs/openbsd\">BSD</a>, you should have a dictionary of words at <strong>/usr/share/dict/words</strong>.\nSee which of those words are available:\n</p>\n<div>\n<pre><code>require 'sqlite3'\ndb = SQLite3::Database.new('domains.db')\nquery = db.prepare('select domain from domains where domain = ?')\nFile.readlines('/usr/share/dict/words').each do |word|\n  rows = query.execute(word.downcase.strip)\n  puts word unless rows.next\nend\n</code></pre><small><a href=\"https://sive.rs/code/domain-word.rb\">download code</a></small>\n</div>\n<p>\nRun that, and you’ll have a list of 93,000 dictionary words that are available with the .com extension.\nCongratulations!\nGo to <a href=\"https://porkbun.com/\">porkbun.com</a> (a great little registrar) to register yours.\n</p><p>\nYou’ll find that some are not actually available because that “com.txt” file doesn’t list domains on hold, pending deletion, or without name servers.\n</p>\n\n<h2>\nCombine short dictionary words\n</h2>\n<p>\nIf you are not excited that “electrotelethermometer.com” or “counterexcommunication.com” is available, maybe you would like a combination of two short words?\nSelect only dictionary words up to four letters, then search for the combination.\n</p>\n<div>\n<pre><code>require 'sqlite3'\nwords = File.readlines('/usr/share/dict/words').map(&amp;:strip)\nwords.select! {|w| w.size &lt;= 4}\ndb = SQLite3::Database.new('domains.db')\nquery = db.prepare('select domain from domains where domain = ?')\nwords.each do |word1|\n  words.each do |word2|\n    combo = (word1 + word2).downcase\n    rows = query.execute(combo)\n    puts combo unless rows.next\n  end\nend\n</code></pre><small><a href=\"https://sive.rs/code/domain-words.rb\">download code</a></small>\n</div>\n\n<h2>\nNarrow it down to good words\n</h2>\n<p>\nIf you ran that last script, you’ll get tens of millions of available domains like “knabtuik.com” because there are many unknown, ugly, and useless short words.\n</p><p>\nSo make a new file called “<strong>goodwords.txt</strong>” of only three and four letter words, using grep:\n</p>\n<code><pre>\n$ grep \"^...$\" /usr/share/dict/words &gt;&gt; goodwords.txt\n$ grep \"^....$\" /usr/share/dict/words &gt;&gt; goodwords.txt\n</pre></code>\n<p>\nEdit that file by hand, deleting every word you would never want.\n(The less you keep, the better.)\nThen run that Ruby script again, combining just the good words:\n</p>\n<div>\n<pre><code>require 'sqlite3'\nwords = File.readlines('goodwords.txt').map(&amp;:strip)\ndb = SQLite3::Database.new('domains.db')\nquery = db.prepare('select domain from domains where domain = ?')\nwords.each do |word1|\n  words.each do |word2|\n    combo = (word1 + word2).downcase\n    rows = query.execute(combo)\n    puts combo unless rows.next\n  end\nend\n</code></pre><small><a href=\"https://sive.rs/code/domain-goodwords.rb\">download code</a></small>\n</div>\n<p>\nMuch better, right?\nA little time consuming, but worth it.\nThis is how I found the name of my new translation service, <a href=\"https://inchword.com/\">Inchword</a>.\n</p>\n\n<h2>\nNeed it super-short and nerdy?\n</h2>\n<p>\nOne final hack is that there are tons of very-short .com domain names available in the format “letter-number-letter-number”.\nFor example: <strong>q7r7.com</strong> or <strong>e3p3.com</strong>.\n</p>\n<div>\n<pre><code>require 'sqlite3'\ndb = SQLite3::Database.new('domains.db')\nquery = db.prepare('select domain from domains where domain = ?')\n('a'..'z').each do |a|\n  ('0'..'9').each do |b|\n    ('a'..'z').each do |c|\n      ('0'..'9').each do |d|\n        combo = a + b + c + d\n        rows = query.execute(combo)\n        puts combo unless rows.next\n      end\n    end\n  end\nend\n</code></pre><small><a href=\"https://sive.rs/code/domain-letters.rb\">download code</a></small>\n</div>\n","author":"Derek Sivers","siteTitle":"Derek Sivers","siteHash":"4098504c0d0759e13901f29e63f7d7dbb1d972a078c6dc4560660f373da5c25e","entryHash":"d8edff5c1542a8f0d564ac75959ac7c22026ea0448505b03e15c35e8d0dee004","category":"default"}