{"title":"We need a BDG for Bluesky","link":"http://scripting.com/2024/12/03/162708.html?title=weNeedABdgForBluesky","date":1733243228000,"content":"<p>I was very happy to see <a href=\"https://bsky.app/profile/pfefferle.org/post/3lcfkqqlcfk2j\">this post</a> on Bluesky this morning from a friend, Matthias Pfefferle, who works at Automattic on the connection between WordPress and ActivityPub. </p>\n<p>In his post he asks if there is a BDG for creating a PDS for Bluesky. </p>\n<p>A BDG is a <a href=\"https://www.google.com/search?q=what+is+a+busy+developer%27s+guide\">Busy Developer's Guide</a>, something we did <a href=\"https://web.archive.org/web/20041009205034/http://www.soapware.org/bdg\">first</a> <a href=\"http://scripting.com/davenet/2001/04/04/aBusyDevelopersGuideToSoap.html\">for SOAP</a> in 2001 when we were trying to figure out how to map <a href=\"http://xmlrpc.com/\">XML-RPC</a> onto it.  Since then there have been lots of BDGs for all kinds of things. It's a useful concept because developers are often overly busy, so we need to get right to the problem before understanding all the theory behind it. We need an example that works, and we'll just do what it does. That also guarantees interop, which is the point of course. </p>\n<p>Now we have a similar problem. Bluesky stores a user's writing in a PDS. If we can generate a PDS for our blogs, theoretically Bluesky should be able to see them and use them as if they were created inside Bluesky. If it were easy to understand we could get busy converting everything so it works there. We can do that because we're using popular simple formats like JSON (see below) to organize our work. </p>\n<p>For example this is how I use JSON for my blog, the one you're reading right now.</p>\n<ul>\n<li>Here's a <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog/items\">folder</a> in a repository on GitHub. Broken down into <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog/items/2020\">years</a>, <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog/items/2020/07\">months</a>, <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog/items/2020/07/18\">days</a>, and posts. </li>\n<li>Each post is a JSON file, <a href=\"https://github.com/scripting/Scripting-News/blob/master/blog/items/2019/03/03/a025810.json\">like this</a>. It has three bits of data, the text of the post, when it was created (which also serves as a unique ID, no two posts have the same creation date) and type. This item has a type of outline, because it can have structure, though this post does not. </li>\n<li>Here's <a href=\"https://github.com/scripting/Scripting-News/blob/master/blog/items/2022/07/06/a232835.json\">another post</a> that does have structure. In Bluesky it would be represented as a thread. </li>\n</ul>\n<p>Here's the question. What's the absolutely simplest way to have that structure of posts represented in a Bluesky PDS?</p>\n<p>PS: I had a <a href=\"https://chatgpt.com/share/674f3d6c-4904-8012-b071-953862cd5b4a\">conversation</a> with ChatGPT to scope this out. </p>","author":"","siteTitle":"Scripting News","siteHash":"d6ad59631287cc248e52fdfe0c4f962c0fd08643d455b40f799700d8b2f97c65","entryHash":"130a89db439620c42269b8136d12086d852e9cfb18ab896a4677601299d5a7c0","category":"Sites"}