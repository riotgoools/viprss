{"title":"Using nginx and express-session","link":"https://blog.webb.page/2018-02-10-using-nginx-express-session-in-production.txt","date":1518220800000,"content":"<p>When pushing Socii<a href=\"https://hub.socii.network\">1</a> to production, I ran into a couple of problems and I'm\nsharing them on my blog for you (learn from my mistakes!) and me (external\nmemory source). This post will go over how I dealt with secure sessions not\nworking out of the box with HTTPS.</p>\n<p>Let's start with some code. I'm using Feathers with Express but this code will\nstill work sans Feathers:</p>\n<pre><code>const app = express(feathers())\n  // above removed for brevity\n\n  // Initialize session and restore auth state\n  .use(session({\n    store: store,     // your session store of choice\n    secret: secret,   // this should be an environment variable\n    proxy: process.env.NODE_ENV !== \"development\",\n    resave: false,\n    rolling: true,\n    saveUninitialized: true,\n    cookie: {\n      httpOnly: process.env.NODE_ENV !== \"development\",\n      path: \"/\",\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week\n      secure: process.env.NODE_ENV !== \"development\"\n    }\n  }))\n;\n</code></pre>\n<p>The <code>process.env.NODE_ENV !== \"development\"</code> is a clever shortcut I found\nwhile troubleshooting this issue. If <code>process.env.NODE_ENV</code> does not equal\n<code>development</code>, the result will be true in a production environment. In a\ndevelopment environment, the result would be false. This is assuming of\ncourse, that your development script sets the environment. Something like this\nin your <code>package.json</code>:</p>\n<pre><code>{\n  â€¦above removed for brevity\n\n  \"scripts\": {\n    \"build\": \"npm run clean &amp;&amp; npm install &amp;&amp; npm run build-server\",\n    \"build-server\": \"babel -d build server\",\n    \"clean\": \"rm -rf build package-lock.json &amp;&amp; mkdir build\",\n    \"deploy\": \"vagrant push\",\n    \"dev\": \"NODE_ENV=development nodemon server/index.js --ignore 'public/' --exec babel-node --presets env,stage-2\",\n    \"sass\": \"sass --watch sass:public/css --style compressed\",\n    \"start\": \"npm run build &amp;&amp; NODE_ENV=production node build/index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  }\n}\n</code></pre>\n<p>The scripts to pay attention are <code>dev</code> and <code>start</code>. You can see that I set the\nnode environment before running my app. And there you have it, I hope you've\nfound this post helpful!</p>\n<p>Going back to the <code>express-session</code> code above, I list what most of the\nparameters mean:</p>\n<h2>proxy</h2>\n<p>Trust the reverse proxy when setting secure cookies (via the\n\"X-Forwarded-Proto\" header). The default value is undefined.</p>\n<ul>\n<li><code>true</code> The \"X-Forwarded-Proto\" header will be used.</li>\n<li><code>false</code> All headers are ignored and the connection is considered secure only\nif there is a direct TLS/SSL connection.</li>\n<li><code>undefined</code> Uses the \"trust proxy\" setting from express</li>\n</ul>\n<h2>resave</h2>\n<p>Forces the session to be saved back to the session store, even if the session\nwas never modified during the request.</p>\n<h2>rolling</h2>\n<p>Force a session identifier cookie to be set on every response. The expiration\nis reset to the original maxAge, resetting the expiration countdown.</p>\n<p>The default value is false.</p>\n<p><em>Note</em> When this option is set to <code>true</code> but the <code>saveUninitialized</code> option is\nset to <code>false</code>, the cookie will not be set on a response with an uninitialized\nsession.</p>\n<h2>saveUninitialized</h2>\n<p>Forces a session that is \"uninitialized\" to be saved to the store. A session\nis uninitialized when it is new but not modified.</p>\n<h2>httpOnly</h2>\n<p>Ensures the cookie is sent only over HTTP(S), not client JavaScript, helping\nto protect against cross-site scripting attacks.</p>\n<h2>secure</h2>\n<p>Ensures the browser only sends the cookie over HTTPS.</p>\n<p>Hope this helps! ðŸ•¸</p>\n<hr />\n","author":"","siteTitle":"the webb blog","siteHash":"d87386c8de21b16d23a4d22ceb0991728c5b4e4486d627490c6fcde14e563300","entryHash":"b29ea7a5de7612b224cced253dcc8db1c5e5efa9f15a8c137421f13435f955f8","category":"Sites"}